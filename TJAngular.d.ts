// Generated by dts-bundle v0.5.0

declare module 'TJAngular' {
    export class MockProvider {
        static MOCK_MODULE_NAME: string;
        static MOCK_PREFIX: string;
        static LOGS_ENABLED: boolean;
        static PROMISE_SERVICES: Array<string>;
        static getTestObject<T>(injector: angular.auto.IInjectorService, invokeQueue: Array<any>, descriptor: ProviderDescriptor, unmockeddeps: Array<string>): T;
        static getInvokerQueue(moduledependencies: Array<string>): Array<any>;
        static prepareModuleDependencyDescriptors<T>(injector: angular.auto.IInjectorService, invokeQueue: Array<any>, descriptor: ProviderDescriptor, unmockeddeps: Array<string>): void;
        static registerModuleDependency(instance: any, dep: string | Array<string>): void;
        static initMocks(): void;
        static createTest(target: any, name: string, propertyKey: string, itMethod: (key: string, fn: Function) => void): void;
        static createSpec(target: any, className: string, describeMethod: (key: string, fn: Function) => void): void;
        static registerMock(mock: any, providerName: string, providerType: string): void;
    }
    export class ProviderDescriptor {
        propertyKey: string;
        scope: any;
        mocks: any;
        moduleName: string;
        providerName: string;
        dependencies: Array<string>;
        mock: boolean;
        template: string;
        beforeInject: (deps: any) => void;
        constructor(propertyKey: string);
    }
    export class MethodDescriptor {
        target: any;
        propertyKey: string;
        constructor(target: any, propertyKey: string);
    }
    export function Spec(classname?: string): (target: any) => void;
    export function XSpec(classname?: string): (target: any) => void;
    export function FSpec(classname?: string): (target: any) => void;
    export function Scope(scope: any): (target: any, propertyKey: string) => void;
    export function Template(template: string): (target: any, propertyKey: string) => void;
    export function Mocks(mocks: any): (target: any, propertyKey: string) => void;
    export function BeforeInject(fn: (deps: any) => void): (target: any, propertyKey: string) => void;
    export function Inject(providerName: string, moduleName: string, dependencies?: Array<string>): (target: any, propertyKey: string) => void;
    export function InjectMock(providerName: string): (target: any, propertyKey: string) => void;
    export function Test(name?: string): (target: any, propertyKey: string) => void;
    export function XTest(name?: string): (target: any, propertyKey: string) => void;
    export function FTest(name?: string): (target: any, propertyKey: string) => void;
    export function Before(): (target: any, propertyKey: string) => void;
    export function ProvideMock(providerName: string, providerType: string): (target: any) => void;
    export function ProvideMockService(providerName: string): (target: any) => void;
    export function ProvideMockProvider(providerName: string): (target: any) => void;
    export function ProvideMockController(providerName: string): (target: any) => void;
    export function ProvideMockDirective(providerName: string): (target: any) => void;
    export function ProvideMockValue(providerName: string): (target: any) => void;
    export function ProvideMockConstant(providerName: string): (target: any) => void;
}

